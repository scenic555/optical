library(devtools)
library(optical)
library(roxygen2)
library(optical)
library(optical)
library(optical)
library(MatchIt)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(devtools)
example(yyy <- optical(ip, oc="D", uncert=FALSE, ipop, imf=c(0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.45), maxiter=rep(300, 6), eps=rep(0.002, 6),
nnn=c(0, 50, 50, 200, 200, 200), nsp=c(0.001, 0.0001, 0.0001, 0.00001, 0.00001, 0.00001), sss=0.001, falpha=1.08, ig=3, ex=0))
yyy$h1,package="optical")
library(optical)
library(optical)
library(devtools)
devtools::load_all(".")
library(optical)
devtools::load_all(".")
optical()
optical
ddriv
remove.packages("optical")
library(optical)
devtools::load_all(".")
library(optical)
library(optical)
devtools::load_all(".")
library(optical)
detach("package:optical", unload = TRUE)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
help(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
browseVignettes("tidyr")
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
optical()
optical
library(optical)
library(optical)
# starting grid with node spacing nsp[1] between -ig and ig and spacing 10*nsp[1] between -7 and -ig and between ig and 7
t   <- c(seq(-ig, -7, by=-nsp[1]*10), seq(0, -ig, by=-nsp[1]), seq(0, ig, by=nsp[1]), seq(ig, 7, by=nsp[1]*10))
########################################################################################################################################
########################################################################################################################################
# Define here (ip) the prior guesses for the parameters of the items:
# each item in a row, first discrimination (a), then difficulty (b), then guessing parameter (c)
# In mixed 2/3PL models, the guessing parameter can be set to NA for 2PL items;
# for 2PL models, ip has two columns only.
########################################################################################################################################
# Here examples; choose one of the following or an own definition for ip
# 2PL models
ip <- cbind(c(1, 2, 2.5),
c(-1.5, 0.5, 2),
c(0.2, 0.1, 0.05))
# starting grid with node spacing nsp[1] between -ig and ig and spacing 10*nsp[1] between -7 and -ig and between ig and 7
t   <- c(seq(-ig, -7, by=-nsp[1]*10), seq(0, -ig, by=-nsp[1]), seq(0, ig, by=nsp[1]), seq(ig, 7, by=nsp[1]*10))
ig=3
# starting grid with node spacing nsp[1] between -ig and ig and spacing 10*nsp[1] between -7 and -ig and between ig and 7
t   <- c(seq(-ig, -7, by=-nsp[1]*10), seq(0, -ig, by=-nsp[1]), seq(0, ig, by=nsp[1]), seq(ig, 7, by=nsp[1]*10))
t   <- unique(sort(t))
# Creation of Documentation for R Package
library(devtools)
devtools::load_all(".")
optical
optical()
install.packages("D:/Research project 2022/optical_1.7.1.tar.gz", repos = NULL, type = "source")
library(optical)
library(devtools)
use_github()
usethis::use_githab()
usethis::use_github()
usethis::use_GitHub()
usethis::use_github()
usethis::use_testthat()
devtools::test()
rlang::last_error()`
devtools::load_all(".")
devtools::load_all(".")
library(optical)
library(optical)
library(optical)
devtools::load_all(".")
help(drawdesign)
library(optical)
library(optical)
library(optical)
library(optical)
library(optical)
drawdesign <- function(yyy, ip, ablim=7, ylowl=-9999999, refline=0.002, textout=TRUE, itemnum=NA, layout=1, colvec=1:12) {
imd <- apply(yyy$dd, 2, which.min)    # indicator for minimal directional derivative
m   <- dim(ip)[1]                     # number of items
if (is.na(itemnum[1])) itemnum <- 1:m
mod <- dim(ip)[2]                     # number of columns in ip (if 2, then 2PL; if 3, then 3PL model)
np  <- length(which(!is.na(ip)))      # number of parameters
h   <- rbind(c(-8, 0, 0, 0), yyy$h1)
k   <- dim(h)[1]                      # number of intervals to be drawn + 1
moo <- yyy$mooiter                    # monitored iterations
z1  <- h[, 1]
z2  <- h[, 3]
if (layout>0) {
#dev.new(width=8, height=5, unit="cm")
oldpar <- par(oma=c(1, 1, 0, 1), mar=c(2, 3, 0.5, 0), fig=c(0, 1, 0.53, 1))  # for combined graph
}
else {
#dev.new(width=8, height=2.5, unit="cm")
oldpar <- par(oma=c(1, 1, 0, 1), mar=c(2, 3, 0.5, 0))
}
# Normal distribution plot (Plot 1)
x11 <- seq(-ablim, ablim, length=1001)
y11 <- dnorm(x11)
plot(x11, y11, type="l", lwd=1, axes=FALSE, xlab="",ylab="")
axis(side=1, tick=TRUE, labels=FALSE, at=seq(-ablim, ablim, by=1))
mtext("Ability", side=1, line=0.53, cex=1.2)
# intervals filled with colours
for (i in 2:k) {
cord.x1 <- c(z1[i-1], seq(z1[i-1], z1[i], 0.001), z1[i])
cord.y1 <- c(-0.02, dnorm(seq(z1[i-1], z1[i], 0.001)), -0.02)
polygon(cord.x1, cord.y1, col=colvec[z2[i]], border = NA, lend=1)
}
# labeling of all colours in plot
if (m<5 && textout) {
if (mod==2) { ln<-c(paste0("Item ", itemnum, " (a=", round(ip[, 1], 3), ", ", "b=", round(ip[, 2], 3), ")\n")) }
if (mod==3) { ln<-c(paste0("Item ", itemnum, " (a=", round(ip[, 1], 3), ", ", "b=", round(ip[, 2], 3), ", c=", round(ip[, 3], 3), ")\n")) }
} else {
ln<-c(paste0("Item ", itemnum))
}
#legend("topleft", box.lty=0, inset=.005, ln, col=colvec[1:m], lwd=4, cex=0.75, horiz=FALSE, adj=c(0, 0.4))
legend(x=-9,y=0.40, box.lty=0, inset=.005, ln,
col=colvec[1:m], lwd=4, cex=0.75, horiz=FALSE, adj=c(0, 0.4)
,xpd=TRUE,bty='n')
# Efficiency versus random design
ti   <- length(moo[, 1])
effi <- moo[ti, 3]
if (textout) legend("topright", legend=paste0(yyy$oc, "-efficiency vs.\n", "random design = ", round(effi, 3)), box.lty=0, cex=0.95)
if (layout>0) {
par(fig=c(0, 1, 0.48, 0.52), oma=c(0, 1, 0, 1), mar=c(0, 3, 0, 0), new=TRUE)
#draw the interval based on where dd are minimum (Plot 2)
p <- length(imd)
x <- cbind(yyy$t, imd)
u <- rbind(c(-8, 0), x, c(8, imd[p]))
plot(c(-ablim, ablim), c(-0.1, 0.1), type="n", axes=FALSE)
for (i in 2:dim(u)[1]) { lines(c(u[(i-1), 1], u[i, 1]), c(0, 0), col=colvec[u[i, 2]], lend=1, lwd=8) }
par(fig=c(0, 1, 0, 0.47), oma=c(1, 1, 0, 1), mar=c(2, 3, 0.5, 0), new=TRUE)
# Plot 3
if (layout==1) {
#directional derivative plot box
plot(c(-ablim, ablim), c(max(ylowl, min(yyy$dd)), np+0.5), type="n", axes=FALSE)
axis(side=1, tick=TRUE, labels=T, at=seq(-ablim, ablim, by=1), cex.axis=1.2)
axis(side=2, tick=TRUE, cex.axis=1.2)
mtext("Directional derivative", side=2, line=2.3, cex=1.2)
#draw directional derivative lines
for (i in 1:m){lines(yyy$t, yyy$dd[i, ], col=colvec[i], lwd=2)}
}
if (layout==2) {
viol <- idwv(yyy$dd, yyy$xi)$vio
plot(c(-ablim, ablim), c(max(max(viol), refline)*1.1, 0), type="n", axes=FALSE)
axis(side=1, tick=TRUE, labels=T, at=seq(-ablim, ablim, by=1), cex.axis=1.2)
axis(side=2, tick=TRUE, cex.axis=1.2)
mtext("Violation of eq.th.", side=2, line=2.3, cex=1.2)
points(yyy$t, viol, col=colvec[yyy$xi])
abline(h=refline, col=2)
}
if (layout == 3) {
nil <- c()   # number of iteration when new inner loop (nil) begins
for (i in 2:ti) {
if (moo[i-1, 1] < moo[i,1]) { nil <- c(nil, i-0.5) }
}
tis <- min(ti/3, 51)  # change the y-axis such that all results from iteration 51 are visible (or from total iterations/3 if earlier)
plot(c(1, ti), c(min(moo[tis:ti, 3]), max(moo[, 3])), type="n", xlab="Iteration number", axes=FALSE)
axis(side=1, tick=TRUE, labels=T, cex.axis=1.2)
axis(side=2, tick=TRUE, cex.axis=1.2)
mtext("Iteration number", side=1, line=-1.0, cex=1.2)
mtext("Efficiency (vs. random design)",side=2, line=2.3, cex=1.2)
lines(1:ti, moo[, 3], col=colvec[moo[, 1]], lwd=2)
abline(v=nil, lty=2)
}
if (layout == 4) {
nil <- c()   # number of iteration when new inner loop (nil) begins
for (i in 2:ti) {
if (moo[i-1, 1] < moo[i, 1]) { nil <- c(nil, i-0.5) }
}
moo[(moo[, 4] < min(refline)/100), 4] <- min(refline)/100
plot(c(1, ti), c(min(c(moo[, 4], 0.001)), max(moo[3:ti, 4])), type="n", xlab="Iteration number", ylab="Violation", log="y", axes=FALSE)
axis(side=1, tick=TRUE, labels=T, cex.axis=1.2)
axis(side=2, tick=TRUE, at=c(0.001, 0.1, 10, 1000), cex.axis=1.2)
mtext("Iteration number", side=1, line=-1.0, cex=1.2)
mtext("Violation of eq.th.", side=2, line=2.3, cex=1.2)
lines(1:ti, moo[, 4], col=colvec[moo[, 1]], lwd=2)
abline(v=nil, lty=2)
abline(h=refline, lty=2)
}
if (layout == 5) {
plot(c(-ablim, ablim), c(0, 1), type="n", xlab="Ability", ylab="", las=1)
#text(3, 0.15, legi)
t <- seq(-ablim, ablim, by=0.01)
for (i in 1:m){
if (is.na(ip[2, 1])) { a <- ip[1, 1] } else { a <- ip[i, 1] }
b <- ip[i, 2]
if (mod==3 && is.na(ip[i, 3])==FALSE)  c <- ip[i, 3]  else  c <- 0
lines(t, c + (1-c)/(1+exp(-a*(t-b))), col=colvec[i], lwd=3)
}
}
}
par(oldpar)  # reset graphical parameters
}
########################################################################################################################################
########################################################################################################################################
# Define here (ip) the prior guesses for the parameters of the items:
# each item in a row, first discrimination (a), then difficulty (b), then guessing parameter (c)
# In mixed 2/3PL models, the guessing parameter can be set to NA for 2PL items;
# for 2PL models, ip has two columns only.
########################################################################################################################################
# Here examples; choose one of the following or an own definition for ip
# 2PL models
ip <- cbind(c(1, 2, 2.5),
c(-1.5, 0.5, 2),
c(0.2, 0.1, 0.05))
# Example call recommended for 2-4 items:
yyy <- optical(ip, oc="D", uncert=FALSE, ipop, imf=c(0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.45), maxiter=rep(300, 6), eps=rep(0.002, 6),
nnn=c(0, 50, 50, 200, 200, 200), nsp=c(0.001, 0.0001, 0.0001, 0.00001, 0.00001, 0.00001), sss=0.001, falpha=1.08, ig=3, ex=0)
# Illustration of result: Check visually if equivalence theorem is (approximately) fulfilled
# For description of different layout types, see text before function drawdesign
drawdesign(yyy=yyy, ip=ip, ylowl=-1000, refline=0.002, layout=1)
# 1PL-models with common discrimination parameter
ip <- cbind(c(1.6, NA),
c(-1, 1))
ip <- cbind(c(1, rep(NA, 3)),
c(-1.5, -0.25, 0.25, 1.5))
# Example call recommended for 2-4 items:
yyy <- optical(ip, oc="D", uncert=FALSE, ipop, imf=c(0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.45), maxiter=rep(300, 6), eps=rep(0.002, 6),
nnn=c(0, 50, 50, 200, 200, 200), nsp=c(0.001, 0.0001, 0.0001, 0.00001, 0.00001, 0.00001), sss=0.001, falpha=1.08, ig=3, ex=0)
# Illustration of result: Check visually if equivalence theorem is (approximately) fulfilled
# For description of different layout types, see text before function drawdesign
drawdesign(yyy=yyy, ip=ip, ylowl=-1000, refline=0.002, layout=1)
# 1PL-models with common discrimination parameter
ip <- cbind(c(1.6, NA),
c(-1, 1))
# Example call recommended for 2-4 items:
yyy <- optical(ip, oc="D", uncert=FALSE, ipop, imf=c(0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.45), maxiter=rep(300, 6), eps=rep(0.002, 6),
nnn=c(0, 50, 50, 200, 200, 200), nsp=c(0.001, 0.0001, 0.0001, 0.00001, 0.00001, 0.00001), sss=0.001, falpha=1.08, ig=3, ex=0)
# Illustration of result: Check visually if equivalence theorem is (approximately) fulfilled
# For description of different layout types, see text before function drawdesign
drawdesign(yyy=yyy, ip=ip, ylowl=-1000, refline=0.002, layout=1)
library(devtools)
use_github()
use_git()
devtools::load_all(".")
remove.packages("optical")
devtools::load_all(".")
help
help(optical)
devtools::load_all(".")
library(optical)
library(optical)
help(optical)
library(optical)
library(optical)
# Creation of Documentation for R Package
library(devtools)
pack <- "optical"
path <- find.package(pack)
path
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
pack <- "optical"
pack <- "optical"
pack <- "optical"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
pack <- "optical"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
fun <- "optical"
help(fun, package = "name_of_package", help_type = "pdf")
fun <- "optical"
help(fun, package = "optical", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
pack <- "optical"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::build_manual()
devtools::check(manual=TRUE)
testthat::test_check("optical")
usethis::use_release_issue()
devtools::check(remote = TRUE, manual = TRUE)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
library(knitr)
library(devtools)
library(roxygen2)
library(testthat)
library(optical)
devtools::load_all(".")
critriem
library(devtools)
library(testthat)
library(roxygen2)
helphelp
help("install.packages")
help("install_github")
install_github()
devtools::load_all(".")
devtools::load_all()
help(optical)
# 1PL-models with common discrimination parameter
ip <- cbind(c(1.6, NA),
c(-1, 1))
# Example call recommended for 2-4 items:
yyy <- optical(ip, oc="D", uncert=FALSE, ipop, imf=c(0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.45), maxiter=rep(300, 6), eps=rep(0.002, 6),
nnn=c(0, 50, 50, 200, 200, 200), nsp=c(0.001, 0.0001, 0.0001, 0.00001, 0.00001, 0.00001), sss=0.001, falpha=1.08, ig=3, ex=0)
# Illustration of result: Check visually if equivalence theorem is (approximately) fulfilled
# For description of different layout types, see text before function drawdesign
drawdesign(yyy=yyy, ip=ip, ylowl=-1000, refline=0.002, layout=1)
# Illustration of result: Check visually if equivalence theorem is (approximately) fulfilled
# For description of different layout types, see text before function drawdesign
drawdesign(yyy=yyy, ip=ip, ylowl=-1000, refline=0.002, layout=1)
convergenceplot(moo=yyy$mooiter, refline=c(0.002, 0.001*0.005/0.45))
convergenceplot(moo=yyy, refline=c(0.002, 0.001*0.005/0.45))
convergenceplot(yyy, refline=c(0.002, 0.001*0.005/0.45))
usethis::use_testthat(3)
library(testthat)
library(optical)
test_check("optical")
rlang::last_error()
usethis::use_r()
use_r("optical.R")
use_test("optical.R")
pack <- "optical"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
tools::texi2pdf()
fun <- "optical"
help(fun, package = "optical", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
library(optical)
fun <- "optical"
help(fun, package = "optical", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
pack <- "optical"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(optical)
library(devtools)
library(testthat)
library(roxygen2)
use_git_remote("https://github.com/scenic555/optical.git")
use_git_remote(url=https://github.com/scenic555/optical.git)
use_git_remote(url=https://github.com/scenic555/optical.git)
help("use_git_remote")
git remote add origin https://github.com/scenic555/optical.git
library(devtools)
library(testthat)
git remote add origin https://github.com/scenic555/optical.git
library(roxygen2)
library(optical)
git remote add origin https://github.com/scenic555/optical.git
help("git")
git remote add optical https://github.com/scenic555/optical.git
browse_github_pat()
create_github_token()
usethis::use_git()
git_default_branch_configure()
github_token()
gh::gh_token()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
library(devtools)
library(testthat)
library(roxygen2)
library(optical)
browse_github_pat()
create_github_token()
help("use_github")
# copy url use pasword generate key
edit_r_environ()
create_github_token()
ghp_GJSJ2Gedit_r_environ()WkTlYRlV8lB58pGNwLGYpjyt1laC3t
edit_r_environ()
use_github(protocol ="https",auth_token=sis.getenv("GITHUB_PAT"))
use_github(protocol ="https",auth_token=Sys.getenv("GITHUB_PAT"))
library(usethis)
use_github(protocol ="https",auth_token=Sys.getenv("GITHUB_PAT"))
use_github(protocol ="https",auth_token=Sys.getenv("GITHUB_PAT"))
browseVignettes()
use_github()
library(devtools)
library(testthat)
library(roxygen2)
library(optical)
use_github()
use_github_pages()
rlang::last_error()
devtools:::document()
library(optical)
library(optical)
install.packages("D:/Research project 2022/optical_1.7.1.zip", repos = NULL, type = "win.binary")
library(optical)
library(devtools)
library(testthat)
library(roxygen2)
library(optical)
git remote add origin https://github.com/scenic555/optical
use_github()
check()
options(repos = list(CRAN="http://cran.rstudio.com/"))
pkgs <- available.packages(filters = c("CRAN", "duplicates"))[,'Package']
options(repos = list(CRAN="http://cran.rstudio.com/"))
pkgs <- available.packages(filters = c("CRAN", "duplicates"))[,'Package']
# get all package names in CRAN
options(repos = list(CRAN="http://cran.rstudio.com/"))
pkgs <- available.packages(filters = c("CRAN", "duplicates"))[,'Package']
available.packages(filters = c("CRAN", "duplicates"))
available::available("myutils")
available::available
available::available("Optical")
devtools::check()
import(graphics)
library(devtools)
library(devtools)
import(graphics)
devtools::check()
devtools::load_all(".")
devtools::check()
devtools::load_all(".")
devtools::check()
devtools::check()
help(dnorm)
help(integrate)
usethis::use_package("stats", "Imports")
usethis::use_package("stats", "Imports")
devtools::check()
library(optical)
library(optical)
packageStatus()
packageStatus
library(optical)
ls -l
pack <- "optical"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
fun <- "optical"
help(fun, package = "optical", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
# Generate the pdf manual for whole package
pack <- "optical"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(optical)
# Generate the pdf manual for whole package
pack <- "optical"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
# Generate the pdf manual only for optical function
fun <- "optical"
# Generate the pdf manual for whole package
pack <- "optical"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
# Generate the pdf manual for whole package
pack <- "optical"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(optical)
library(optical)
library(MatchIt)
help(matchit)
